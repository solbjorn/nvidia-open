// This file is automatically generated by rmconfig - DO NOT EDIT!
//
// HAL stubs, generated by rmconfig.
//
// Profile:  shipping-gpus-openrm
// Template: templates/gt_hal_stubs.h
//
// Chips:    TU10X, GA100, GA102, GA103, GA104, GA106, GA107, AD102, AD103, AD104, AD106, AD107, GH10X
//

#ifndef _G_RMCFG_HAL_STUBS_H_
#define _G_RMCFG_HAL_STUBS_H_

// pull in private headers for each engine
#include "g_rpc_private.h"


#include "g_hal.h"

// HACK: a global var unique to the ipVersions _UNASSIGNED routines to ensure this function
//       is not aliased by link-time-optimizations with a _STUB fn that might actually
//       be assigned to a hal method as that would break the <ENG>_HAL_VERIFY_INTERFACE
//       test.
NV_STATUS iGrp_ipVersions_UNIQUIFIER;

// the "_UNASSIGNED" function for all IP_VERSIONS dynamic interfaces
NV_STATUS iGrp_ipVersions_UNASSIGNED(void)
{
    NV_ASSERT_PRECOMP(0 && "iGrp_ipVersions_UNASSIGNED");
    return NV_ERR_NOT_SUPPORTED +
           iGrp_ipVersions_UNIQUIFIER;    // will be 0
}

//
// generated _STUB functions
//

// RPC:hal:VGPU_PF_REG_READ32  -  TU10X, GA100, GA102, GA103, GA104, GA106, GA107, AD102, AD103, AD104, AD106, AD107, GH10X
NV_STATUS rpcVgpuPfRegRead32_STUB(
    POBJGPU       pGpu,
    POBJRPC       pRpc,
    NvU64         arg3,
    NvU32        *pArg4,
    NvU32         arg5
)
{
    return NV_VGPU_MSG_RESULT_RPC_UNKNOWN_FUNCTION;
}

// RPC:hal:DUMP_PROTOBUF_COMPONENT  -  TU10X, GA100, GA102, GA103, GA104, GA106, GA107, AD102, AD103, AD104, AD106, AD107, GH10X
NV_STATUS rpcDumpProtobufComponent_STUB(
    POBJGPU       pGpu,
    POBJRPC       pRpc,
    PRB_ENCODER  *pPrbEnc,
    NVD_STATE    *pNvDumpState,
    NVDUMP_COMPONENT  component
)
{
    return NV_VGPU_MSG_RESULT_RPC_UNKNOWN_FUNCTION;
}

// RPC:hal:ALLOC_MEMORY  -  TU10X, GA100, GA102, GA103, GA104, GA106, GA107, AD102, AD103, AD104, AD106, AD107, GH10X
NV_STATUS rpcAllocMemory_STUB(
    POBJGPU       pGpu,
    POBJRPC       pRpc,
    NvHandle      arg3,
    NvHandle      arg4,
    NvHandle      arg5,
    NvU32         arg6,
    NvU32         arg7,
    MEMORY_DESCRIPTOR *pArg8
)
{
    return NV_VGPU_MSG_RESULT_RPC_UNKNOWN_FUNCTION;
}

// RPC:hal:GPU_EXEC_REG_OPS  -  TU10X, GA100, GA102, GA103, GA104, GA106, GA107, AD102, AD103, AD104, AD106, AD107, GH10X
NV_STATUS rpcGpuExecRegOps_STUB(
    POBJGPU       pGpu,
    POBJRPC       pRpc,
    NvHandle      arg3,
    NvHandle      arg4,
    NV2080_CTRL_GPU_EXEC_REG_OPS_PARAMS *pArg5,
    NV2080_CTRL_GPU_REG_OP *pArg6
)
{
    return NV_VGPU_MSG_RESULT_RPC_UNKNOWN_FUNCTION;
}

// RPC:hal:RMFS_INIT  -  TU10X, GA100, GA102, GA103, GA104, GA106, GA107, AD102, AD103, AD104, AD106, AD107, GH10X
NV_STATUS rpcRmfsInit_STUB(
    POBJGPU       pGpu,
    POBJRPC       pRpc,
    PMEMORY_DESCRIPTOR  arg3
)
{
    return NV_VGPU_MSG_RESULT_RPC_UNKNOWN_FUNCTION;
}

// RPC:hal:UNSET_PAGE_DIRECTORY  -  TU10X, GA100, GA102, GA103, GA104, GA106, GA107, AD102, AD103, AD104, AD106, AD107, GH10X
NV_STATUS rpcUnsetPageDirectory_STUB(
    POBJGPU       pGpu,
    POBJRPC       pRpc,
    NvHandle      arg3,
    NvHandle      arg4,
    NV0080_CTRL_DMA_UNSET_PAGE_DIRECTORY_PARAMS *pArg5
)
{
    return NV_VGPU_MSG_RESULT_RPC_UNKNOWN_FUNCTION;
}

// RPC:hal:GET_GSP_STATIC_INFO  -  TU10X, GA100, GA102, GA103, GA104, GA106, GA107, AD102, AD103, AD104, AD106, AD107, GH10X
NV_STATUS rpcGetGspStaticInfo_STUB(
    POBJGPU       pGpu,
    POBJRPC       pRpc
)
{
    return NV_VGPU_MSG_RESULT_RPC_UNKNOWN_FUNCTION;
}

// RPC:hal:GSP_SET_SYSTEM_INFO  -  TU10X, GA100, GA102, GA103, GA104, GA106, GA107, AD102, AD103, AD104, AD106, AD107, GH10X
NV_STATUS rpcGspSetSystemInfo_STUB(
    POBJGPU       pGpu,
    POBJRPC       pRpc
)
{
    return NV_VGPU_MSG_RESULT_RPC_UNKNOWN_FUNCTION;
}

// RPC:hal:RMFS_CLEANUP  -  TU10X, GA100, GA102, GA103, GA104, GA106, GA107, AD102, AD103, AD104, AD106, AD107, GH10X
NV_STATUS rpcRmfsCleanup_STUB(
    POBJGPU       pGpu,
    POBJRPC       pRpc
)
{
    return NV_VGPU_MSG_RESULT_RPC_UNKNOWN_FUNCTION;
}

// RPC:hal:SET_PAGE_DIRECTORY  -  TU10X, GA100, GA102, GA103, GA104, GA106, GA107, AD102, AD103, AD104, AD106, AD107, GH10X
NV_STATUS rpcSetPageDirectory_STUB(
    POBJGPU       pGpu,
    POBJRPC       pRpc,
    NvHandle      arg3,
    NvHandle      arg4,
    NV0080_CTRL_DMA_SET_PAGE_DIRECTORY_PARAMS *pArg5
)
{
    return NV_VGPU_MSG_RESULT_RPC_UNKNOWN_FUNCTION;
}

// RPC:hal:UNLOADING_GUEST_DRIVER  -  TU10X, GA100, GA102, GA103, GA104, GA106, GA107, AD102, AD103, AD104, AD106, AD107, GH10X
NV_STATUS rpcUnloadingGuestDriver_STUB(
    POBJGPU       pGpu,
    POBJRPC       pRpc,
    NvBool        arg3,
    NvBool        arg4,
    NvU32         arg5
)
{
    return NV_VGPU_MSG_RESULT_RPC_UNKNOWN_FUNCTION;
}

// RPC:hal:SET_REGISTRY  -  TU10X, GA100, GA102, GA103, GA104, GA106, GA107, AD102, AD103, AD104, AD106, AD107, GH10X
NV_STATUS rpcSetRegistry_STUB(
    POBJGPU       pGpu,
    POBJRPC       pRpc
)
{
    return NV_VGPU_MSG_RESULT_RPC_UNKNOWN_FUNCTION;
}

// RPC:hal:RMFS_CLOSE_QUEUE  -  TU10X, GA100, GA102, GA103, GA104, GA106, GA107, AD102, AD103, AD104, AD106, AD107, GH10X
NV_STATUS rpcRmfsCloseQueue_STUB(
    POBJGPU       pGpu,
    POBJRPC       pRpc
)
{
    return NV_VGPU_MSG_RESULT_RPC_UNKNOWN_FUNCTION;
}

// RPC:hal:GET_STATIC_INFO  -  TU10X, GA100, GA102, GA103, GA104, GA106, GA107, AD102, AD103, AD104, AD106, AD107, GH10X
NV_STATUS rpcGetStaticInfo_STUB(
    POBJGPU       pGpu,
    POBJRPC       pRpc
)
{
    return NV_VGPU_MSG_RESULT_RPC_UNKNOWN_FUNCTION;
}

// RPC:hal:IDLE_CHANNELS  -  TU10X, GA100, GA102, GA103, GA104, GA106, GA107, AD102, AD103, AD104, AD106, AD107, GH10X
NV_STATUS rpcIdleChannels_STUB(
    OBJGPU       *pArg1,
    POBJRPC       pRpc,
    NvHandle     *phclients,
    NvHandle     *phdevices,
    NvHandle     *phchannels,
    NvU32         nentries,
    NvU32         flags,
    NvU32         timeout
)
{
    return NV_VGPU_MSG_RESULT_RPC_UNKNOWN_FUNCTION;
}

// RPC:hal:UPDATE_BAR_PDE  -  TU10X, GA100, GA102, GA103, GA104, GA106, GA107, AD102, AD103, AD104, AD106, AD107, GH10X
NV_STATUS rpcUpdateBarPde_STUB(
    POBJGPU       pGpu,
    POBJRPC       pRpc,
    NV_RPC_UPDATE_PDE_BAR_TYPE  arg3,
    NvU64         arg4,
    NvU64         arg5
)
{
    return NV_VGPU_MSG_RESULT_RPC_UNKNOWN_FUNCTION;
}

// RPC:hal:MAP_MEMORY_DMA  -  TU10X, GA100, GA102, GA103, GA104, GA106, GA107, AD102, AD103, AD104, AD106, AD107, GH10X
NV_STATUS rpcMapMemoryDma_STUB(
    POBJGPU       pGpu,
    POBJRPC       pRpc,
    NvHandle      arg3,
    NvHandle      arg4,
    NvHandle      arg5,
    NvHandle      arg6,
    NvU64         arg7,
    NvU64         arg8,
    NvU32         arg9,
    NvU64        *pArg10
)
{
    return NV_VGPU_MSG_RESULT_RPC_UNKNOWN_FUNCTION;
}

// RPC:hal:UNMAP_MEMORY_DMA  -  TU10X, GA100, GA102, GA103, GA104, GA106, GA107, AD102, AD103, AD104, AD106, AD107, GH10X
NV_STATUS rpcUnmapMemoryDma_STUB(
    POBJGPU       pGpu,
    POBJRPC       pRpc,
    NvHandle      arg3,
    NvHandle      arg4,
    NvHandle      arg5,
    NvHandle      arg6,
    NvU32         arg7,
    NvU64         arg8
)
{
    return NV_VGPU_MSG_RESULT_RPC_UNKNOWN_FUNCTION;
}

// RPC:hal:RMFS_TEST  -  TU10X, GA100, GA102, GA103, GA104, GA106, GA107, AD102, AD103, AD104, AD106, AD107, GH10X
NV_STATUS rpcRmfsTest_STUB(
    POBJGPU       pGpu,
    POBJRPC       pRpc,
    NvU32         arg3,
    NvU32         arg4,
    NvU32         arg5,
    NvU32         arg6
)
{
    return NV_VGPU_MSG_RESULT_RPC_UNKNOWN_FUNCTION;
}

#endif  // _G_RMCFG_HAL_STUBS_H_
