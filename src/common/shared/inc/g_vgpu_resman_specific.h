/************************************************************************************
 * ################### THIS FILE IS AUTOGENERATED. DO NOT EDIT. ################### *
 ***********************************************************************************/

#ifdef __VGPU_SRIOV_ENABLED_SKUS__
static inline NvBool isSriovEnabledSKU(NvU16 devid, NvU16 ssid)
{
    if (devid == 0x20B0)
        return NV_TRUE;
    if (devid == 0x20B2)
        return NV_TRUE;
    if ((devid == 0x20B5) && (ssid == 0x1533))
        return NV_TRUE;
    if ((devid == 0x20B7) && (ssid == 0x1532))
        return NV_TRUE;
    if (devid == 0x20BE)
        return NV_TRUE;
    if (devid == 0x20BF)
        return NV_TRUE;
    if (devid == 0x20F1)
        return NV_TRUE;
    if (devid == 0x20F3)
        return NV_TRUE;
    if (devid == 0x20F5)
        return NV_TRUE;
    if ((devid == 0x20F6) && (ssid == 0x17A3))
        return NV_TRUE;
    if (devid == 0x2230)
        return NV_TRUE;
    if (devid == 0x2231)
        return NV_TRUE;
    if ((devid == 0x2233) && (ssid == 0x165A))
        return NV_TRUE;
    if (devid == 0x2235)
        return NV_TRUE;
    if (devid == 0x2236)
        return NV_TRUE;
    if (devid == 0x2237)
        return NV_TRUE;
    if ((devid == 0x2238) && (ssid == 0x1677))
        return NV_TRUE;
    if ((devid == 0x2322) && (ssid == 0x17A4))
        return NV_TRUE;
    if ((devid == 0x2331) && (ssid == 0x1626))
        return NV_TRUE;
    if ((devid == 0x25B6) && (ssid == 0x14A9))
        return NV_TRUE;
    if ((devid == 0x25B6) && (ssid == 0x157E))
        return NV_TRUE;
    if ((devid == 0x20B8) && (ssid == 0x1581))
        return NV_TRUE;
    if ((devid == 0x20B9) && (ssid == 0x157F))
        return NV_TRUE;
    return NV_FALSE;
}
#endif //__VGPU_SRIOV_ENABLED_SKUS__

#ifdef __VGPU_ALIAS_PGPU_LIST__
static inline void _get_chip_id_for_alias_pgpu(NvU32 *dev_id, NvU32 *subdev_id)
{
    struct vgpu_alias_details {
        NvU32 alias_devid;
        NvU32 alias_subdevid;
        NvU32 devid;
        NvU32 subdevid;
    } vgpu_aliases[] = {
        { 0x20B8, 0x1581, 0x20B5, 0x1533 },
        { 0x20B9, 0x157F, 0x20B7, 0x1532 },
    };

    for (NvU32 i = 0; i < (sizeof(vgpu_aliases) / sizeof(struct vgpu_alias_details)); ++i) {
        if ((*dev_id == vgpu_aliases[i].alias_devid) && (*subdev_id == vgpu_aliases[i].alias_subdevid)) {
            *dev_id = vgpu_aliases[i].devid;
            *subdev_id = vgpu_aliases[i].subdevid;
            break;
        }
    }

    return;
}
#endif //__VGPU_ALIAS_PGPU_LIST__
